#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <iostream>
#include <string>
#include <WS2tcpip.h>
#pragma comment (lib, "ws2_32.lib")

using namespace std;

int main() {
    // Initialize winsock
    WSADATA wsData;
    WORD ver = MAKEWORD(2, 2);
    int wsOK = WSAStartup(ver, &wsData);
    if (wsOK != 0) {
        std::cerr << "Can't initialize winsock! Quitting" << std::endl;
        return 1;
    }

    // Create a socket
    SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) {
        std::cerr << "Can't create socket! Quitting" << std::endl;
        return 1;
    }

    // Connect to the server
    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(54001);
    inet_pton(AF_INET, "127.0.0.1", &hint.sin_addr);
    char clientIP[INET_ADDRSTRLEN];
    int connResult = connect(sock, (sockaddr*)&hint, sizeof(hint));
    if (connResult == SOCKET_ERROR) {
        std::cerr << "Can't connect to server! Quitting" << std::endl;
        closesocket(sock);
        WSACleanup();
        return 1;
    }

    // While loop to send and receive data
    char buf[4096];
    std::string userInput;
    int bytesReceived;

    // Receive welcome message from the server
    

    while (true) {
        // Prompt the user for some text
        ZeroMemory(buf, 4096);
        bytesReceived = recv(sock, buf, 4096, 0);
        if (bytesReceived > 0) {
            // Print received message to console
            std::cout << "SERVER> " << std::string(buf, bytesReceived) << std::endl;
            if (!strcmp(buf, "Wrong username or password!")) {
                break;
            }
        }
        std::cout << "> ";
        std::getline(std::cin, userInput);
        if (userInput.size() > 0) {
            int sendResult = send(sock, userInput.c_str(), userInput.size() + 1, 0);
        }
    }
    // Close the socket
    closesocket(sock);

    // Cleanup winsock
    WSACleanup();

    return 0;
}
